clear
close all
rehash path

addpath ../sandbox
addpath ../bear

estimStart = datex.q(1972,1);
estimEnd = datex.q(2020,1);
estimSpan = datex.span(estimStart, estimEnd);

turningPoint1 = datex.q(2008,1);
turningPoint2 = datex.q(2014,4);  


inputTbx = tablex.fromCsv("SV.csv");

meta = meanAdjusted.Meta( ...
    endogenous=["YER", "HICSA", "STN"], ...
    units="", ...
    exogenous=[], ...
    order=4, ...
    intercept=false, ...
    estimationSpan=estimSpan, ...
    trendType = ["time", "constant", "constant"],...
    numRegimes = [2, 2, 1],...    
    regimeSpans = { ...
                    {[datex.span(estimStart, turningPoint1), ...
                      datex.span(datex.shift(turningPoint2, 1), estimEnd)]}, ...
                    {datex.span(datex.shift(turningPoint1, 1), turningPoint2)} ...
                  }, ...
    bounds = {{[]}, {[1 4], [0 2]}, {[2 5]}}, ...              
    identificationHorizon=20 ...
    ...
);


dataH = meanAdjusted.DataHolder(meta, inputTbx);

estimatorR = estimator.MeanAdjusted(meta,...
    ScaleUp = 100);

modelR = meanAdjusted.ReducedForm( ...
    meta=meta ...
    , dataHolder=dataH ...
    , estimator=estimatorR ...
    , stabilityThreshold=Inf ...
);
modelR.Estimator.Settings
modelR.initialize();
info = modelR.presample(1000);


fcastStart = datex.shift(modelR.Meta.EstimationEnd, -10);
fcastEnd = datex.shift(modelR.Meta.EstimationEnd, 0);
fcastSpan = datex.span(fcastStart, fcastEnd);

fcastTbx = modelR.forecast(fcastSpan);
fcastPrctileTbx = tablex.apply(fcastTbx, prctileFunc);
fcastPrctileTbx = tablex.flatten(fcastPrctileTbx);

fcastTbx
fcastPrctileTbx