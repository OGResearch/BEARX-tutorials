%FAVAR
%Testing FAVAR estimators

clear
close all
clear classes
rehash path

addpath ../sandbox
addpath ../bear

% functions
%The extremesFunc function compresses any number of samples (draws from the posterior) into two numbers - the minimum and the maximum.
percentiles = [10, 50, 90];

prctileFunc = @(x) prctile(x, percentiles, 2);

extremesFunc = @(x) [min(x, [], 2), max(x, [], 2)];

%Prepare data and a reduced-form model
%Same as in introCommonTasks
inputTbx = tablex.fromCsv("FAVAR.csv");

estimStart = datex.m(1960,3);
estimEnd = datex.m(2001,8);
estimSpan = datex.span(estimStart, estimEnd);

meta = minnesotaFAVARTwostep.Meta( ...
    endogenousConcepts=["FYFF"],...
    units="", ...
    exogenous=[],...
    order=13, ...
    intercept=false, ...
    estimationSpan=estimSpan, ...
    reducibleNames=["IPP" , "IPF" , "IPC" , "IPCD" , "IPCN" , "IPE" , "IPI" , "IPM" , "IPMD" , "IPMND" ,...
        "IPMFG" , "IPD" , "IPN" , "IPMIN" , "IPUT" , "IP" , "IPXMCA" , "PMI" , "PMP" , "GMPYQ" , "GMYXPQ" , ...
        "LHEL" , "LHELX" , "LHEM" , "LHNAG" , "LHUR" , "LHU680" , "LHU5" , "LHU14" , "LHU15" , "LHU26" ,...
        "LPNAG" , "LP" , "LPGD" , "LPMI" , "LPCC" , "LPEM" , "LPED" , "LPEN" , "LPSP" , "LPTU" , "LPT" ,...
        "LPFR" , "LPS" , "LPGOV" , "LPHRM" , "LPMOSA" , "PMEMP" , "GMCQ" , "GMCDQ" , "GMCNQ" , "GMCSQ" ,...
        "GMCANQ" , "HSFR" , "HSNE" , "HSMW" , "HSSOU" , "HSWST" , "HSBR" , "HMOB" , "PMNV" , "PMNO" , ...
        "PMDEL" , "MOCMQ" , "MSONDQ" , "FSNCOM" , "FSPCOM" , "FSPIN" , "FSPCAP" , "FSPUT" , "FSDXP" , ...
        "FSPXE" , "EXRSW" , "EXRJAN" , "EXRUK" , "EXRCAN" , "FYGM3" , "FYGM6" , "FYGT1" , "FYGT5" , ...
        "FYGT10" , "FYAAAC" , "FYBAAC" , "SFYGM3" , "SFYGM6" , "SFYGT1" , "SFYGT5" , "SFYGT10" , ...
        "SFYAAAC" , "SFYBAAC" , "FM1" , "FM2" , "FM3" , "FM2DQ" , "FMFBA" , "FMRRA" , "FMRNBA" , ...
        "FCLNQ" , "FCLBMC" , "CCINRV" , "PMCP" , "PWFSA" , "PWFCSA" , "PWIMSA" , "PWCMSA" , "PSM99Q" , ...
        "PUNEW" , "PU83" , "PU84" , "PU85" , "PUC" , "PUCD" , "PUS" , "PUXF" , "PUXHS" , "PUXM" , "LEHCC" , "LEHM" , "HHSNTN"], ...
    reducibleBlocks=["slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", ...
        "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow", "slow"],...
    blockType = "blocks", ...    
    numFactors = struct("slow",2), ...
    identificationHorizon=12);
dataH = minnesotaFAVARTwostep.DataHolder(meta, inputTbx);


%Reduced form models


% estimatorR1 = estimator.NormalWishartFAVAROnestep()
estimatorR1 = estimator.MinnesotaFAVARTwostep(meta)
%{
%TV FAVARs
estimator.BetaTVFAVAR
estimator.GeneralTVFAVAR

%SV FAVARs
estimator.CarrieroSVFAVAR
estimator.CogleySargentSVFAVAR
estimator.RandomInertiaSVFAVAR

%Plain FAVARs
estimator.FlatFAVAROnestep
estimator.FlatFAVARTwostep
estimator.IndNormalWishartFAVAROnestep
estimator.IndNormalWishartFAVARTwostep
estimator.NormalDiffuseFAVAROnestep
estimator.NormalDiffuseFAVARTwostep
estimator.NormalWishartFAVAROnestep
estimator.NormalWishartFAVARTwostep
estimator.MinnesotaFAVAROnestep
estimator.MinnesotaFAVARTwostep
%}


modelR1 = minnesotaFAVARTwostep.ReducedForm( ...
    meta=meta ...
    , dataHolder=dataH ...
    , estimator=estimatorR1 ...
    , stabilityThreshold=Inf ...
);


modelR1.initialize();
info0 = modelR1.presample(100);
modelR1.Presampled{1}.beta


%Unconditional forecast 
fcastStart = datex.shift(modelR1.Meta.EstimationEnd, -10);
fcastEnd = datex.shift(modelR1.Meta.EstimationEnd, 0);
fcastSpan = datex.span(fcastStart, fcastEnd);

fcastStart, fcastEnd

fcastTbx = modelR1.forecast(fcastSpan);
fcastPrctileTbx = tablex.apply(fcastTbx, prctileFunc);
fcastPrctileTbx = tablex.flatten(fcastPrctileTbx);

